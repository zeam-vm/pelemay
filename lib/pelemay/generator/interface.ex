defmodule Pelemay.Generator.Interface do
  alias Pelemay.Generator
  alias Pelemay.Db
  alias Pelemay.Generator

  require Logger

  def generate(module) when is_atom(module) do
    case generate_functions() do
      "" ->
        {:error, "Don't need defpelemay"}

      funcs ->
        str = """
        # This file was generated by Pelemay.Generator.Interface
        defmodule #{Generator.nif_module(module)} do
          @compile {:autoload, false}
          @on_load :load_nifs

          require Logger

          def load_nifs do
            nif_file = "#{Generator.libnif(module)}"
            case :erlang.load_nif(nif_file, 0) do
              :ok -> :ok
              other -> Logger.debug(#{~S/"Failed to load NIF:#{other}"/})
            end
          end

        #{funcs}
        end
        """

        Generator.stub(module) |> File.write(str)
        Generator.stub(module) |> Code.compile_file(Generator.ebin())

        Code.append_path(Generator.ebin())
        :ok
    end
  end

  defp generate_functions do
    Db.get_functions()
    |> Enum.map(&generate_function(&1))
    |> List.to_string()
  end

  defp generate_function([func_info]) do
    %{
      nif_name: nif_name,
      module: _,
      function: _,
      arg_num: num,
      args: _,
      operators: _
    } = func_info

    args = generate_string_arguments(num)

    """
      def #{nif_name}(#{args}), do: raise "NIF #{nif_name}/#{num} not implemented"
    """
  end

  defp generate_function([]), do: []

  defp generate_string_arguments(num) do
    1..num
    |> Enum.reduce(
      "",
      fn
        x, "" -> "_arg#{x}"
        x, acc -> acc <> ", _arg#{x}"
      end
    )
  end
end
